"use strict";(self.webpackChunkscanamo_website=self.webpackChunkscanamo_website||[]).push([[261],{4809:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=t(4848),i=t(8453);const r={title:"Batch Operations",sidebar_position:2},o=void 0,s={id:"batch-operations",title:"Batch Operations",description:"Many operations against Dynamo can be performed in batches. Scanamo",source:"@site/docs/batch-operations.md",sourceDirName:".",slug:"/batch-operations",permalink:"/batch-operations",draft:!1,unlisted:!1,editUrl:"https://github.com/scanamo/scanamo/blob/main/docs/batch-operations.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Batch Operations",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Operations",permalink:"/operations"},next:{title:"Conditional Operations",permalink:"/conditional-operations"}},m={},l=[];function c(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Many operations against Dynamo can be performed in batches. Scanamo\nhas support for putting, getting and deleting in batches."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import org.scanamo._\nimport org.scanamo.syntax._\nimport org.scanamo.generic.auto._\nimport software.amazon.awssdk.services.dynamodb.model.ScalarAttributeType._\n\nval client = LocalDynamoDB.syncClient()\nval scanamo = Scanamo(client)\n\nLocalDynamoDB.createTable(client)("lemmings")("role" -> S)\n\ncase class Lemming(role: String, number: Long)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'val lemmingsTable = Table[Lemming]("lemmings")\n// lemmingsTable: Table[Lemming] = Table("lemmings")\nval ops = for {\n  _ <- lemmingsTable.putAll(Set(\n    Lemming("Walker", 99), Lemming("Blocker", 42), Lemming("Builder", 180)\n  ))\n  bLemmings <- lemmingsTable.getAll("role" in Set("Blocker", "Builder"))\n  _ <- lemmingsTable.deleteAll("role" in Set("Walker", "Blocker"))\n  survivors <- lemmingsTable.scan()\n} yield (bLemmings, survivors)\n// ops: cats.free.Free[org.scanamo.ops.ScanamoOpsA, (Set[Either[DynamoReadError, Lemming]], List[Either[DynamoReadError, Lemming]])] = FlatMapped(\n//   FlatMapped(\n//     Suspend(\n//       BatchWrite(\n//         BatchWriteItemRequest(RequestItems={lemmings=[WriteRequest(PutRequest=PutRequest(Item={number=AttributeValue(N=99), role=AttributeValue(S=Walker)})), WriteRequest(PutRequest=PutRequest(Item={number=AttributeValue(N=42), role=AttributeValue(S=Blocker)})), WriteRequest(PutRequest=PutRequest(Item={number=AttributeValue(N=180), role=AttributeValue(S=Builder)}))]})\n//       )\n//     ),\n//     org.scanamo.ScanamoFree$$$Lambda/0x000000c002bdd450@7b18fc35\n//   ),\n//   <function1>\n// )\nval (bLemmings, survivors) = scanamo.exec(ops)\n// bLemmings: Set[Either[DynamoReadError, Lemming]] = Set(\n//   Right(Lemming("Builder", 180L)),\n//   Right(Lemming("Blocker", 42L))\n// )\n// survivors: List[Either[DynamoReadError, Lemming]] = List(\n//   Right(Lemming("Builder", 180L))\n// )\nbLemmings.flatMap(_.toOption)\n// res1: Set[Lemming] = Set(Lemming("Builder", 180L), Lemming("Blocker", 42L))\nsurvivors.flatMap(_.toOption)\n// res2: List[Lemming] = List(Lemming("Builder", 180L))\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var a=t(6540);const i={},r=a.createContext(i);function o(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);