"use strict";(self.webpackChunkscanamo_website=self.webpackChunkscanamo_website||[]).push([[81],{3258:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var t=a(4848),r=a(8453);const s={title:"Operations",sidebar_position:1},i=void 0,o={id:"operations",title:"Operations",description:"Scanamo supports all the DynamoDB operations that interact with individual items in DynamoDB tables:",source:"@site/docs/operations.md",sourceDirName:".",slug:"/operations",permalink:"/operations",draft:!1,unlisted:!1,editUrl:"https://github.com/scanamo/scanamo/blob/main/docs/operations.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Operations",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/"},next:{title:"Batch Operations",permalink:"/batch-operations"}},l={},c=[{value:"Put and Get",id:"put-and-get",level:3},{value:"Delete",id:"delete",level:3},{value:"Update",id:"update",level:3},{value:"Scan",id:"scan",level:3},{value:"Query",id:"query",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Scanamo supports all the DynamoDB operations that interact with individual items in DynamoDB tables:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#put-and-get",children:"Put"})," for adding a new item, or replacing an existing one"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#put-and-get",children:"Get"})," for retrieving an item by a fully specified key"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#delete",children:"Delete"})," for removing an item"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#update",children:"Update"})," for updating some portion of the fields of an item, whilst leaving the rest\nas is"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#scan",children:"Scan"})," for retrieving all elements of a table"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#query",children:"Query"})," for retrieving all elements with a given hash-key and a range key that matches\nsome criteria"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Scanamo also supports ",(0,t.jsx)(n.a,{href:"/batch-operations",children:"batched operations"}),", ",(0,t.jsx)(n.a,{href:"/conditional-operations",children:"conditional operations"}),"\nand queries against ",(0,t.jsx)(n.a,{href:"/using-indexes",children:"secondary indexes"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"put-and-get",children:"Put and Get"}),"\n",(0,t.jsx)(n.p,{children:"Often when using DynamoDB, the primary use case is simply putting objects into\nDynamo and subsequently retrieving them:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import org.scanamo._\nimport org.scanamo.syntax._\nimport org.scanamo.generic.auto._\nimport software.amazon.awssdk.services.dynamodb.model.ScalarAttributeType._\n\nval client = LocalDynamoDB.syncClient()\nval scanamo = Scanamo(client)\nLocalDynamoDB.createTable(client)("muppets")("name" -> S)\n\ncase class Muppet(name: String, species: String)\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val muppets = Table[Muppet]("muppets")\n// muppets: Table[Muppet] = Table("muppets")\nscanamo.exec {\n  for {\n    _ <- muppets.put(Muppet("Kermit", "Frog"))\n    _ <- muppets.put(Muppet("Cookie Monster", "Monster"))\n    _ <- muppets.put(Muppet("Miss Piggy", "Pig"))\n    kermit <- muppets.get("name" === "Kermit")\n  } yield kermit\n}\n// res1: Option[Either[DynamoReadError, Muppet]] = Some(\n//   Right(Muppet("Kermit", "Frog"))\n// )\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Note that when using ",(0,t.jsx)(n.code,{children:"Table"})," no operations are actually executed against DynamoDB until ",(0,t.jsx)(n.code,{children:"exec"})," is called."]}),"\n",(0,t.jsx)(n.h3,{id:"delete",children:"Delete"}),"\n",(0,t.jsx)(n.p,{children:"To remove an item in its entirety, we can use delete:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import org.scanamo._\nimport org.scanamo.syntax._\nimport software.amazon.awssdk.services.dynamodb.model.ScalarAttributeType._\n\nLocalDynamoDB.createTable(client)("villains")("name" -> S)\n\ncase class Villain(name: String, catchphrase: String)\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val villains = Table[Villain]("villains")\n// villains: Table[Villain] = Table("villains")\nscanamo.exec {\n  for {\n    _ <- villains.put(Villain("Dalek", "EXTERMINATE!"))\n    _ <- villains.put(Villain("Cyberman", "DELETE"))\n    _ <- villains.delete("name" === "Cyberman")\n    survivors <- villains.scan()\n  } yield survivors\n}\n// res3: List[Either[DynamoReadError, Villain]] = List(\n//   Right(Villain("Dalek", "EXTERMINATE!"))\n// )\n'})}),"\n",(0,t.jsx)(n.h3,{id:"update",children:"Update"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to change some of the fields of an item, that don't form part of its key,\nwithout replacing the item entirely, you can use the ",(0,t.jsx)(n.code,{children:"update"})," operation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import org.scanamo._\nimport org.scanamo.syntax._\nimport software.amazon.awssdk.services.dynamodb.model.ScalarAttributeType._\n\nLocalDynamoDB.createTable(client)("teams")("name" -> S)\n\ncase class Team(name: String, goals: Int, scorers: List[String], mascot: Option[String])\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val teamTable = Table[Team]("teams")\n// teamTable: Table[Team] = Table("teams")\nscanamo.exec {\n  for {\n    _ <- teamTable.put(Team("Watford", 1, List("Blissett"), Some("Harry the Hornet")))\n    updated <- teamTable.update("name" === "Watford",\n      set("goals", 2) and append("scorers", "Barnes") and remove("mascot"))\n  } yield updated\n}\n// res5: Either[DynamoReadError, Team] = Right(\n//   Team("Watford", 2, List("Blissett", "Barnes"), None)\n// )\n'})}),"\n",(0,t.jsx)(n.p,{children:"Which fields are updated can be based on incoming data:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import cats.data.NonEmptyList\nimport org.scanamo.ops.ScanamoOps\nimport org.scanamo.DynamoReadError\nimport org.scanamo.update.UpdateExpression\n\nLocalDynamoDB.createTable(client)("favourites")("name" -> S)\n\ncase class Favourites(name: String, colour: String, number: Long)\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val favouritesTable = Table[Favourites]("favourites")\n// favouritesTable: Table[Favourites] = Table("favourites")\n\nscanamo.exec(favouritesTable.put(Favourites("Alice", "Blue", 42L)))\n\ncase class FavouriteUpdate(name: String, colour: Option[String], number: Option[Long])\n\ndef updateFavourite(fu: FavouriteUpdate): Option[ScanamoOps[Either[DynamoReadError, Favourites]]] = {\n  val updates: List[UpdateExpression] = List(\n    fu.colour.map(c => set("colour", c)),\n    fu.number.map(n => set("number", n))\n  ).flatten\n  NonEmptyList.fromList(updates).map(ups =>\n    favouritesTable.update("name" === fu.name, ups.reduce[UpdateExpression](_ and _))\n  )\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import cats.implicits._\n\nval updates = List(\n  FavouriteUpdate("Alice", Some("Aquamarine"), Some(93L)),\n  FavouriteUpdate("Alice", Some("Red"), None),\n  FavouriteUpdate("Alice", None, None)\n)\n// updates: List[FavouriteUpdate] = List(\n//   FavouriteUpdate("Alice", Some("Aquamarine"), Some(93L)),\n//   FavouriteUpdate("Alice", Some("Red"), None),\n//   FavouriteUpdate("Alice", None, None)\n// )\n\nscanamo.exec(\n  for {\n    _ <- updates.flatMap(updateFavourite).sequence\n    result <- favouritesTable.get("name" === "Alice")\n  } yield result\n)\n// res8: Option[Either[DynamoReadError, Favourites]] = Some(\n//   Right(Favourites("Alice", "Red", 93L))\n// )\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Further examples, showcasing different types of update can be found in the scaladoc for the ",(0,t.jsx)(n.code,{children:"update"})," method on ",(0,t.jsx)(n.code,{children:"Table"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"scan",children:"Scan"}),"\n",(0,t.jsx)(n.p,{children:"If you want to go through all elements of a table, or index, Scanamo\nsupports scanning it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import org.scanamo._\nimport software.amazon.awssdk.services.dynamodb.model.ScalarAttributeType._\n\nLocalDynamoDB.createTable(client)("lines")("mode" -> S, "line" -> S)\n\ncase class Transport(mode: String, line: String)\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'val transportTable = Table[Transport]("lines")\n// transportTable: Table[Transport] = Table("lines")\nval operations = for {\n  _ <- transportTable.putAll(Set(\n    Transport("Underground", "Circle"),\n    Transport("Underground", "Metropolitan"),\n    Transport("Underground", "Central"),\n    Transport("Tram", "Croydon Tramlink")\n  ))\n  allLines <- transportTable.scan()\n} yield allLines.toList\n// operations: cats.free.Free[ops.ScanamoOpsA, List[Either[DynamoReadError, Transport]]] = FlatMapped(\n//   FlatMapped(\n//     Suspend(\n//       BatchWrite(\n//         BatchWriteItemRequest(RequestItems={lines=[WriteRequest(PutRequest=PutRequest(Item={line=AttributeValue(S=Circle), mode=AttributeValue(S=Underground)})), WriteRequest(PutRequest=PutRequest(Item={line=AttributeValue(S=Metropolitan), mode=AttributeValue(S=Underground)})), WriteRequest(PutRequest=PutRequest(Item={line=AttributeValue(S=Central), mode=AttributeValue(S=Underground)})), WriteRequest(PutRequest=PutRequest(Item={line=AttributeValue(S=Croydon Tramlink), mode=AttributeValue(S=Tram)}))]})\n//       )\n//     ),\n//     org.scanamo.ScanamoFree$$$Lambda/0x000000c002bdd450@5c7f2d0\n//   ),\n//   <function1>\n// )\n\nscanamo.exec(operations)\n// res10: List[Either[DynamoReadError, Transport]] = List(\n//   Right(Transport("Tram", "Croydon Tramlink")),\n//   Right(Transport("Underground", "Central")),\n//   Right(Transport("Underground", "Circle")),\n//   Right(Transport("Underground", "Metropolitan"))\n// )\n'})}),"\n",(0,t.jsx)(n.h3,{id:"query",children:"Query"}),"\n",(0,t.jsx)(n.p,{children:"Scanamo can be used to perform most queries that can be made against DynamoDB"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'scanamo.exec {\n  for {\n    _ <- transportTable.putAll(Set(\n      Transport("Underground", "Circle"),\n      Transport("Underground", "Metropolitan"),\n      Transport("Underground", "Central")\n    ))\n    tubesStartingWithC <- transportTable.query("mode" === "Underground" and ("line" beginsWith "C"))\n  } yield tubesStartingWithC.toList\n}\n// res11: List[Either[DynamoReadError, Transport]] = List(\n//   Right(Transport("Underground", "Central")),\n//   Right(Transport("Underground", "Circle"))\n// )\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(6540);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);